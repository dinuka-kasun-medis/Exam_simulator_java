/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.genius.view.student;

import edu.ijse.gdse37.genius.connector.ServerConnector;
import edu.ijse.gdse37.genius.view.admin.QuestionPanel2;
import edu.ijse.gdse37.genius.view.admin.ResultsSavePanel;
import edu.ijse.gdse37.genius_common.controllers.ExamAnswerSheetController;
import edu.ijse.gdse37.genius_common.controllers.StudentController;
import edu.ijse.gdse37.genius_common.model.ExamAnswerSheet;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Dinuka
 */
public class ExamPanel extends javax.swing.JPanel {

    private ArrayList<QuestionPanel2> questionPanel2List = new ArrayList<>();
    private ArrayList<ExamAnswerSheet> examAnswerSheets = new ArrayList<>();
    private ExamAnswerSheet examAnswerSheet;
    private ResultsSavePanel resultsSavePanel;
    static int seconds;

    /**
     * Creates new form ExamPanel
     *
     * @param exam_id
     * @param noOfQuestions
     * @param paper
     */
    public ExamPanel(String exam_id, int noOfQuestions, String paper) {
        initComponents();
        seconds = 3*60*noOfQuestions;
        timmer();
        paperTxtArea.setText(paper.replace("♥", "\n").replace("♣", "\t"));
        getAnswers(exam_id);
        for (int i = 0; i < noOfQuestions; i++) {
            JPanel jPanel = addPanel(i + 1);
            answerPanel.add(jPanel);
            QuestionPanel2 qu = (QuestionPanel2) jPanel;
            questionPanel2List.add(qu);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paperTxtArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        answerPanel = new javax.swing.JPanel();
        stopBtn = new javax.swing.JButton();
        timmerLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        paperTxtArea.setEditable(false);
        paperTxtArea.setColumns(20);
        paperTxtArea.setRows(5);
        jScrollPane1.setViewportView(paperTxtArea);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(60, 66, 740, 540);

        answerPanel.setLayout(new javax.swing.BoxLayout(answerPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(answerPanel);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(840, 60, 230, 540);

        stopBtn.setText("Stop Exam");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        jPanel1.add(stopBtn);
        stopBtn.setBounds(530, 10, 140, 23);

        timmerLbl.setFont(new java.awt.Font("Times New Roman", 2, 48)); // NOI18N
        timmerLbl.setText("03:56:32");
        jPanel1.add(timmerLbl);
        timmerLbl.setBounds(1120, 100, 180, 60);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("You have only,");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(1080, 60, 140, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        stopExam();
    }//GEN-LAST:event_stopBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel answerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea paperTxtArea;
    private javax.swing.JButton stopBtn;
    private javax.swing.JLabel timmerLbl;
    // End of variables declaration//GEN-END:variables

    /*Method for set panel © Dinuka Kasun Medis*/
    private static JPanel addPanel(int qNo) {
        QuestionPanel2 questionPanel2 = new QuestionPanel2();
        questionPanel2.qNoLbl.setText(Integer.toString(qNo));
        return questionPanel2;
    }

    /*Method for stop exam © Dinuka Kasun Medis*/
    public void stopExam() {
        int i = 0;
        int mark = 0;
        for (QuestionPanel2 questionPanel2 : questionPanel2List) {
            boolean answer1 = questionPanel2.chekBox1.isSelected();
            boolean answer2 = questionPanel2.chekBox2.isSelected();
            boolean answer3 = questionPanel2.chekBox3.isSelected();
            boolean answer4 = questionPanel2.chekBox4.isSelected();
            boolean answer5 = questionPanel2.chekBox5.isSelected();
//            System.out.println("size exam sheet =" + examAnswerSheets.size());
//            System.out.println((i + 1) + " =" + answer1 + "," + answer2 + "," + answer3 + "," + answer4 + "," + answer5);
            examAnswerSheet = examAnswerSheets.get(i);
//            System.out.print("correct =" + examAnswerSheet.isCorect1());
//            System.out.print("," + examAnswerSheet.isCorect2());
//            System.out.print("," + examAnswerSheet.isCorect3());
//            System.out.print("," + examAnswerSheet.isCorect4());
//            System.out.print("," + examAnswerSheet.isCorect5() + "\n");

            if (examAnswerSheet.isCorect1() == answer1 && examAnswerSheet.isCorect2() == answer2 && examAnswerSheet.isCorect3() == answer3 && examAnswerSheet.isCorect4() == answer4 && examAnswerSheet.isCorect5() == answer5) {
                mark++;
            } else {
                //Do nothing..
            }
            i++;
        }
        if (mark==0) {
            //do nothing...
        }else{
           // mark++;
        }
//        JOptionPane.showMessageDialog(this, "mark => " + mark);
        double result=(mark*100)/questionPanel2List.size();
        sendResult(Student_Main_Window.studentId+":"+result);
    }

    /*Method for get answer © Dinuka Kasun Medis*/
    private void getAnswers(String exam_id) {
        try {
            ExamAnswerSheetController examAnswerSheetController = ServerConnector.getServerConnector().getExamAnswerSheetController();
            examAnswerSheets = examAnswerSheetController.getAllExamAnswerSheet(exam_id);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*Method for timmer © Dinuka Kasun Medis*/
    private void timmer() {
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                seconds--;
                int day = (int) TimeUnit.SECONDS.toDays(seconds);
                long hours = TimeUnit.SECONDS.toHours(seconds) - (day * 24);
                long minute = TimeUnit.SECONDS.toMinutes(seconds)
                        - (TimeUnit.SECONDS.toHours(seconds) * 60);
                long second = TimeUnit.SECONDS.toSeconds(seconds)
                        - (TimeUnit.SECONDS.toMinutes(seconds) * 60);
                timmerLbl.setText(hours + ":" + minute + ":"+ second );
                if (seconds == 0) {
                    stopExam();
                }
            }
        });
        timer.start();
    }
    
    /*Method for send results © Dinuka Kasun Medis*/
    private void sendResult(String text){
        try {
            StudentController studentController=ServerConnector.getServerConnector().getStudentController();
            studentController.sendResults(text);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
