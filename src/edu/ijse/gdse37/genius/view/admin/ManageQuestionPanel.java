/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.genius.view.admin;

import edu.ijse.gdse37.genius.connector.ServerConnector;
import edu.ijse.gdse37.genius_common.controllers.IDController;
import edu.ijse.gdse37.genius_common.controllers.QuestionAndAnswerController;
import edu.ijse.gdse37.genius_common.controllers.SubjectController;
import edu.ijse.gdse37.genius_common.controllers.UniteController;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import edu.ijse.gdse37.genius_common.model.QuestionAndAnswer;
import edu.ijse.gdse37.genius_common.model.Subject;
import edu.ijse.gdse37.genius_common.model.Unite;

/**
 *
 * @author Dinuka
 */
public class ManageQuestionPanel extends javax.swing.JPanel {

    private AddNewSubjectForm addNewSubjectForm;
    private AddNewUniteForm addNewUniteForm;
    private boolean isNew = false;
    private Admin_Main_Window admin_Main_Window;

    /**
     * Creates new form ManageQuestionPanel
     *
     * @param admin_Main_Window
     */
    public ManageQuestionPanel(Admin_Main_Window admin_Main_Window) {
        initComponents();
        this.admin_Main_Window=admin_Main_Window;
        newSubjectLbl.setVisible(false);
        newUniteLbl.setVisible(false);
        loadSubject();
        loadUnite();
        loadQuestionId();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainWindowPanel = new javax.swing.JPanel();
        deleteBtn = new javax.swing.JButton();
        addNewQuestionBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        answer5Txt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionTxt = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        answer1Txt = new javax.swing.JTextField();
        answer2Txt = new javax.swing.JTextField();
        answer3Txt = new javax.swing.JTextField();
        answer4Txt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        correct5Check = new javax.swing.JCheckBox();
        correct1Check = new javax.swing.JCheckBox();
        correct2Check = new javax.swing.JCheckBox();
        correct3Check = new javax.swing.JCheckBox();
        correct4Check = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        addNewUniteBtn = new javax.swing.JLabel();
        addNewSubjectBtn = new javax.swing.JLabel();
        newUniteLbl = new javax.swing.JLabel();
        newSubjectLbl = new javax.swing.JLabel();
        subjectCombo = new javax.swing.JComboBox<>();
        uniteCombo = new javax.swing.JComboBox<>();
        question_idCombo = new javax.swing.JComboBox<>();
        newQuestionId = new javax.swing.JTextField();
        cancelBtn = new javax.swing.JButton();
        SearchByUniteBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 153, 0));

        mainWindowPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.setLayout(null);

        deleteBtn.setBackground(new java.awt.Color(162, 234, 249));
        deleteBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        deleteBtn.setText("Delete Question");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(deleteBtn);
        deleteBtn.setBounds(550, 560, 200, 40);

        addNewQuestionBtn.setBackground(new java.awt.Color(162, 234, 249));
        addNewQuestionBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addNewQuestionBtn.setText("Add New Question");
        addNewQuestionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewQuestionBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(addNewQuestionBtn);
        addNewQuestionBtn.setBounds(50, 560, 200, 40);

        addBtn.setBackground(new java.awt.Color(162, 234, 249));
        addBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addBtn.setText("Add ");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(addBtn);
        addBtn.setBounds(50, 560, 200, 40);

        updateBtn.setBackground(new java.awt.Color(162, 234, 249));
        updateBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        updateBtn.setText("Update Question");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(updateBtn);
        updateBtn.setBounds(300, 560, 200, 40);

        answer5Txt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(answer5Txt);
        answer5Txt.setBounds(160, 460, 580, 30);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Question Id :");
        mainWindowPanel.add(jLabel2);
        jLabel2.setBounds(50, 20, 110, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Subject :");
        mainWindowPanel.add(jLabel3);
        jLabel3.setBounds(360, 20, 80, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Unite :");
        mainWindowPanel.add(jLabel4);
        jLabel4.setBounds(760, 20, 70, 30);

        questionTxt.setColumns(20);
        questionTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        questionTxt.setRows(5);
        jScrollPane1.setViewportView(questionTxt);

        mainWindowPanel.add(jScrollPane1);
        jScrollPane1.setBounds(50, 100, 1050, 170);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Question :");
        mainWindowPanel.add(jLabel5);
        jLabel5.setBounds(50, 70, 90, 20);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Answer 1 :");
        mainWindowPanel.add(jLabel6);
        jLabel6.setBounds(50, 300, 110, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Answer 2 :");
        mainWindowPanel.add(jLabel7);
        jLabel7.setBounds(50, 340, 110, 30);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Answer 3 :");
        mainWindowPanel.add(jLabel8);
        jLabel8.setBounds(50, 380, 110, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Answer 4 :");
        mainWindowPanel.add(jLabel9);
        jLabel9.setBounds(50, 420, 110, 30);

        answer1Txt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(answer1Txt);
        answer1Txt.setBounds(160, 300, 580, 30);

        answer2Txt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(answer2Txt);
        answer2Txt.setBounds(160, 340, 580, 30);

        answer3Txt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(answer3Txt);
        answer3Txt.setBounds(160, 380, 580, 30);

        answer4Txt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(answer4Txt);
        answer4Txt.setBounds(160, 420, 580, 30);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setText("Answer 5 :");
        mainWindowPanel.add(jLabel10);
        jLabel10.setBounds(50, 460, 110, 30);

        correct5Check.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.add(correct5Check);
        correct5Check.setBounds(740, 460, 20, 30);

        correct1Check.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.add(correct1Check);
        correct1Check.setBounds(740, 300, 21, 30);

        correct2Check.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.add(correct2Check);
        correct2Check.setBounds(740, 340, 20, 30);

        correct3Check.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.add(correct3Check);
        correct3Check.setBounds(740, 380, 20, 30);

        correct4Check.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.add(correct4Check);
        correct4Check.setBounds(740, 420, 20, 30);

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/genius/view/images/logo2New.png"))); // NOI18N
        mainWindowPanel.add(jLabel11);
        jLabel11.setBounds(950, 550, 190, 90);

        addNewUniteBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addNewUniteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/genius/view/images/list-add.png"))); // NOI18N
        addNewUniteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewUniteBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addNewUniteBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addNewUniteBtnMouseExited(evt);
            }
        });
        mainWindowPanel.add(addNewUniteBtn);
        addNewUniteBtn.setBounds(1080, 20, 30, 30);

        addNewSubjectBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addNewSubjectBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/genius/view/images/list-add.png"))); // NOI18N
        addNewSubjectBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewSubjectBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addNewSubjectBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addNewSubjectBtnMouseExited(evt);
            }
        });
        mainWindowPanel.add(addNewSubjectBtn);
        addNewSubjectBtn.setBounds(690, 20, 30, 30);

        newUniteLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newUniteLbl.setForeground(new java.awt.Color(0, 0, 255));
        newUniteLbl.setText("Add New Unite");
        mainWindowPanel.add(newUniteLbl);
        newUniteLbl.setBounds(1050, 50, 90, 14);

        newSubjectLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newSubjectLbl.setForeground(new java.awt.Color(0, 0, 255));
        newSubjectLbl.setText("Add New Subject");
        mainWindowPanel.add(newSubjectLbl);
        newSubjectLbl.setBounds(690, 50, 100, 14);

        subjectCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        subjectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectComboActionPerformed(evt);
            }
        });
        mainWindowPanel.add(subjectCombo);
        subjectCombo.setBounds(430, 20, 250, 30);

        uniteCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        uniteCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                uniteComboItemStateChanged(evt);
            }
        });
        uniteCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                uniteComboFocusGained(evt);
            }
        });
        mainWindowPanel.add(uniteCombo);
        uniteCombo.setBounds(820, 20, 250, 30);

        question_idCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        question_idCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                question_idComboItemStateChanged(evt);
            }
        });
        mainWindowPanel.add(question_idCombo);
        question_idCombo.setBounds(160, 20, 170, 30);
        mainWindowPanel.add(newQuestionId);
        newQuestionId.setBounds(160, 20, 170, 30);

        cancelBtn.setBackground(new java.awt.Color(162, 234, 249));
        cancelBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(cancelBtn);
        cancelBtn.setBounds(300, 560, 200, 40);

        SearchByUniteBtn.setBackground(new java.awt.Color(162, 234, 249));
        SearchByUniteBtn.setText("Search By Unite");
        SearchByUniteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByUniteBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(SearchByUniteBtn);
        SearchByUniteBtn.setBounds(820, 53, 250, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindowPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1145, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindowPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        try {
            QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
            String question_id = question_idCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();
            String unite = uniteCombo.getSelectedItem().toString();
            boolean isDeleted = questionAndAnswerController.isDeleteQuestionAndAnswer(subject, unite, question_id);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Question deleted sucsess...");
            } else {
                JOptionPane.showMessageDialog(this, "Somthing wrong...question delete");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        try {
            QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
            String question_id = newQuestionId.getText();
            String subject = subjectCombo.getSelectedItem().toString();
            String unite = uniteCombo.getSelectedItem().toString();
            String question = questionTxt.getText().replace("\n", "♥");
            String answer1 = answer1Txt.getText();
            String answer2 = answer2Txt.getText();
            String answer3 = answer3Txt.getText();
            String answer4 = answer4Txt.getText();
            String answer5 = answer5Txt.getText();
            boolean correct1 = correct1Check.isSelected();
            boolean correct2 = correct2Check.isSelected();
            boolean correct3 = correct3Check.isSelected();
            boolean correct4 = correct4Check.isSelected();
            boolean correct5 = correct5Check.isSelected();
            QuestionAndAnswer questionAndAnswer = new QuestionAndAnswer(question_id, subject, unite, question, answer1, answer2, answer3,
                    answer4, answer5, correct1, correct2, correct3, correct4, correct5);
            boolean isAdded = questionAndAnswerController.isAddQuestionAndAnswer(questionAndAnswer);
            if (isAdded) {
                JOptionPane.showMessageDialog(this, "Question added sucsess...");
                cancelBtn.doClick();
                loadQuestionId();
            } else {
                JOptionPane.showMessageDialog(this, "Somthing wrong...question add");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try {
            QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
            String question_id = question_idCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();
            String unite = uniteCombo.getSelectedItem().toString();
            String question = questionTxt.getText().replace("\n", "♥");
            String answer1 = answer1Txt.getText();
            String answer2 = answer2Txt.getText();
            String answer3 = answer3Txt.getText();
            String answer4 = answer4Txt.getText();
            String answer5 = answer5Txt.getText();
            boolean correct1 = correct1Check.isSelected();
            boolean correct2 = correct2Check.isSelected();
            boolean correct3 = correct3Check.isSelected();
            boolean correct4 = correct4Check.isSelected();
            boolean correct5 = correct5Check.isSelected();
            QuestionAndAnswer questionAndAnswer = new QuestionAndAnswer(question_id, subject, unite, question, answer1, answer2, answer3,
                    answer4, answer5, correct1, correct2, correct3, correct4, correct5);
            boolean isUpdated = questionAndAnswerController.isUpdateQuestionAndAnswer(questionAndAnswer);
            if (isUpdated) {
                JOptionPane.showMessageDialog(this, "Question updated sucsess...");
            } else {
                JOptionPane.showMessageDialog(this, "Somthing wrong...question update");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void addNewSubjectBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewSubjectBtnMouseEntered
        newSubjectLbl.setVisible(true);
    }//GEN-LAST:event_addNewSubjectBtnMouseEntered

    private void addNewSubjectBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewSubjectBtnMouseExited
        newSubjectLbl.setVisible(false);
    }//GEN-LAST:event_addNewSubjectBtnMouseExited

    private void addNewUniteBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewUniteBtnMouseEntered
        newUniteLbl.setVisible(true);
    }//GEN-LAST:event_addNewUniteBtnMouseEntered

    private void addNewUniteBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewUniteBtnMouseExited
        newUniteLbl.setVisible(false);
    }//GEN-LAST:event_addNewUniteBtnMouseExited

    private void addNewSubjectBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewSubjectBtnMouseClicked
        addNewSubjectForm = new AddNewSubjectForm(admin_Main_Window, true);
        addNewSubjectForm.setVisible(true);
        loadSubject();
    }//GEN-LAST:event_addNewSubjectBtnMouseClicked

    private void addNewUniteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewUniteBtnMouseClicked
        addNewUniteForm = new AddNewUniteForm(admin_Main_Window, true);
        addNewUniteForm.loadNewId(subjectCombo.getSelectedItem().toString());
        addNewUniteForm.setVisible(true);
        loadUnite();
    }//GEN-LAST:event_addNewUniteBtnMouseClicked

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged
        if (!isNew) {
            loadQuestionId();
            loadUnite();
        }else{
           addNewQuestionBtn.doClick();
        }
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void subjectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboActionPerformed

    private void uniteComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_uniteComboItemStateChanged
//        if (!isNew) {
//            loadQuestionId();
//        }else{
//           addNewQuestionBtn.doClick();
//        }
    }//GEN-LAST:event_uniteComboItemStateChanged

    private void question_idComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_question_idComboItemStateChanged
        if (question_idCombo.getSelectedItem() != null) {
            previewQuestion();
        }
    }//GEN-LAST:event_question_idComboItemStateChanged

    private void addNewQuestionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewQuestionBtnActionPerformed
        try {
            IDController iDController = ServerConnector.getServerConnector().getIDController();
            String newId = iDController.getLastQuestionId(subjectCombo.getSelectedItem().toString(), "All");
            newQuestionId.setText(newId);
            setNew();
            isNew=true;
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addNewQuestionBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        question_idCombo.setVisible(true);
        addNewQuestionBtn.setVisible(true);
        SearchByUniteBtn.setVisible(true);
        updateBtn.setVisible(true);
        deleteBtn.setVisible(true);
        isNew=false;
        if (question_idCombo.getSelectedItem() != null) {
            previewQuestion();
        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void SearchByUniteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByUniteBtnActionPerformed
        if (!isNew) {
            loadQuestionId();
        }else{
           addNewQuestionBtn.doClick();
        }
    }//GEN-LAST:event_SearchByUniteBtnActionPerformed

    private void uniteComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uniteComboFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_uniteComboFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchByUniteBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addNewQuestionBtn;
    private javax.swing.JLabel addNewSubjectBtn;
    private javax.swing.JLabel addNewUniteBtn;
    private javax.swing.JTextField answer1Txt;
    private javax.swing.JTextField answer2Txt;
    private javax.swing.JTextField answer3Txt;
    private javax.swing.JTextField answer4Txt;
    private javax.swing.JTextField answer5Txt;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JCheckBox correct1Check;
    private javax.swing.JCheckBox correct2Check;
    private javax.swing.JCheckBox correct3Check;
    private javax.swing.JCheckBox correct4Check;
    private javax.swing.JCheckBox correct5Check;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainWindowPanel;
    private javax.swing.JTextField newQuestionId;
    private javax.swing.JLabel newSubjectLbl;
    private javax.swing.JLabel newUniteLbl;
    private javax.swing.JTextArea questionTxt;
    private javax.swing.JComboBox<String> question_idCombo;
    private javax.swing.JComboBox<String> subjectCombo;
    private javax.swing.JComboBox<String> uniteCombo;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    /*Method for load subjects to combo © Dinuka Kasun Medis*/
    private void loadSubject() {
        try {
            SubjectController subjectController = ServerConnector.getServerConnector().getSubjectController();
            ArrayList<Subject> subjectList = subjectController.getAllSubject();
            if (subjectList != null) {
                subjectCombo.removeAllItems();
                for (Subject subject : subjectList) {
                    subjectCombo.addItem(subject.getName());
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for load unites © Dinuka Kasun Medis*/
    private void loadUnite() {
        try {
            UniteController uniteController = ServerConnector.getServerConnector().getUniteController();
            SubjectController subjectController = ServerConnector.getServerConnector().getSubjectController();
            Subject subject = subjectController.searchSubject("subjectName", subjectCombo.getSelectedItem().toString());
            String subject_id = subject.getSubject_id();
            ArrayList<Unite> uniteList = uniteController.getAllUnite(subject_id);
            if (uniteList != null) {
                uniteCombo.removeAllItems();
                for (Unite unite : uniteList) {
                    uniteCombo.addItem(unite.getName());
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for load question IDs © Dinuka Kasun Medis*/
    private void loadQuestionId() {
        try {
            if (subjectCombo.getSelectedItem() != null && uniteCombo.getSelectedItem() != null) {
                QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
                ArrayList<QuestionAndAnswer> questionList = questionAndAnswerController.getAllQuestionAndAnswers(subjectCombo.getSelectedItem().toString(), uniteCombo.getSelectedItem().toString());
                question_idCombo.removeAllItems();
                for (QuestionAndAnswer questionAndAnswer : questionList) {
                    question_idCombo.addItem(questionAndAnswer.getQuestion_id());
                }
            } else {
                //Do nothing..
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for preview questions © Dinuka Kasun Medis*/
    private void previewQuestion() {
        try {
            QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
            String question_id = question_idCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();
            String unite = uniteCombo.getSelectedItem().toString();
            QuestionAndAnswer questionAndAnswer = questionAndAnswerController.searchQuestionAndAnswer(subject, unite, "question_id", question_id);
            if (questionAndAnswer != null) {
                uniteCombo.setSelectedItem(questionAndAnswer.getUnit());
                questionTxt.setText(questionAndAnswer.getQuestion().replace("♥", "\n"));
                answer1Txt.setText(questionAndAnswer.getAnswer1());
                answer2Txt.setText(questionAndAnswer.getAnswer2());
                answer3Txt.setText(questionAndAnswer.getAnswer3());
                answer4Txt.setText(questionAndAnswer.getAnswer4());
                answer5Txt.setText(questionAndAnswer.getAnswer5());
                correct1Check.setSelected(questionAndAnswer.isCorrect1());
                correct2Check.setSelected(questionAndAnswer.isCorrect2());
                correct3Check.setSelected(questionAndAnswer.isCorrect3());
                correct4Check.setSelected(questionAndAnswer.isCorrect4());
                correct5Check.setSelected(questionAndAnswer.isCorrect5());
            } else {
                JOptionPane.showMessageDialog(this, "Somthing wrong...question view");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for prepare for a new question © Dinuka Kasun Medis*/
    private void setNew() {
        question_idCombo.setVisible(false);
        addNewQuestionBtn.setVisible(false);
        SearchByUniteBtn.setVisible(false);
        updateBtn.setVisible(false);
        deleteBtn.setVisible(false);
        questionTxt.setText("");
        answer1Txt.setText("");
        answer2Txt.setText("");
        answer3Txt.setText("");
        answer4Txt.setText("");
        answer5Txt.setText("");
        correct1Check.setSelected(false);
        correct2Check.setSelected(false);
        correct3Check.setSelected(false);
        correct4Check.setSelected(false);
        correct5Check.setSelected(false);
    }
}
