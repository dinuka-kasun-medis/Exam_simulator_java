/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.genius.view.admin;

import edu.ijse.gdse37.genius.connector.ServerConnector;
import edu.ijse.gdse37.genius.view.other.ChooseRandomQuestion;
import edu.ijse.gdse37.genius.view.other.ComboSearch;
import edu.ijse.gdse37.genius_common.controllers.IDController;
import edu.ijse.gdse37.genius_common.controllers.SubjectController;
import edu.ijse.gdse37.genius_common.controllers.UniteController;
import edu.ijse.gdse37.genius_common.model.QuestionAndAnswer;
import edu.ijse.gdse37.genius_common.model.Subject;
import edu.ijse.gdse37.genius_common.model.Unite;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Dinuka
 */
public class AutomaticallyExamCreate extends javax.swing.JPanel {

    private static ExamPaperPriviewPanel examPaperPriviewPanel;
    private final Admin_Main_Window ADMIN_MAIN_WINDOW;
//    private static ArrayList<QuestionAndAnswer> questionAndAnswerList = new ArrayList<>();
    
    /**
     * Creates new form AutomaticallyExamCreate
     * @param admin_Main_Window
     */
    public AutomaticallyExamCreate(Admin_Main_Window admin_Main_Window) {
        initComponents();
        this.ADMIN_MAIN_WINDOW=admin_Main_Window;
        setId();
        loadSubject();
        loadUnite();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainWindowPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        previewBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        examNameTxt = new javax.swing.JTextField();
        uniteCombo = new javax.swing.JComboBox<>();
        subjectCombo = new javax.swing.JComboBox<>();
        numberOfQuestionsCombo = new javax.swing.JComboBox<>();
        examIdTxt = new javax.swing.JLabel();

        mainWindowPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.setLayout(null);

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/genius/view/images/logo2New.png"))); // NOI18N
        mainWindowPanel.add(jLabel8);
        jLabel8.setBounds(950, 550, 190, 90);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Select Unite :");
        mainWindowPanel.add(jLabel3);
        jLabel3.setBounds(280, 240, 140, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Exam Name :");
        mainWindowPanel.add(jLabel4);
        jLabel4.setBounds(280, 120, 140, 30);

        previewBtn.setBackground(new java.awt.Color(255, 255, 255));
        previewBtn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        previewBtn.setText("Preview");
        previewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(previewBtn);
        previewBtn.setBounds(280, 430, 500, 70);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Select Subject :");
        mainWindowPanel.add(jLabel5);
        jLabel5.setBounds(280, 180, 140, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Number of Selected Questions :");
        mainWindowPanel.add(jLabel6);
        jLabel6.setBounds(280, 290, 250, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Exam Id :");
        mainWindowPanel.add(jLabel7);
        jLabel7.setBounds(20, 10, 90, 30);

        examNameTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(examNameTxt);
        examNameTxt.setBounds(420, 120, 360, 30);

        uniteCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        uniteCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                uniteComboItemStateChanged(evt);
            }
        });
        mainWindowPanel.add(uniteCombo);
        uniteCombo.setBounds(420, 240, 360, 30);

        subjectCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        mainWindowPanel.add(subjectCombo);
        subjectCombo.setBounds(420, 180, 360, 30);

        numberOfQuestionsCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(numberOfQuestionsCombo);
        numberOfQuestionsCombo.setBounds(550, 290, 230, 30);

        examIdTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        examIdTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mainWindowPanel.add(examIdTxt);
        examIdTxt.setBounds(100, 10, 250, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainWindowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewBtnActionPerformed
        String exam_id=examIdTxt.getText();
        String examName=examNameTxt.getText();
        String subject=subjectCombo.getSelectedItem().toString();
        String unite=uniteCombo.getSelectedItem().toString();
        int numberOfQuestions=Integer.parseInt(numberOfQuestionsCombo.getSelectedItem().toString());
        ArrayList<QuestionAndAnswer> questionAndAnswerList = new ArrayList<>();
        questionAndAnswerList=addQuestions(subject, unite, numberOfQuestions);
        examPaperPriviewPanel=new ExamPaperPriviewPanel(exam_id,examName,subject,unite,numberOfQuestions,ADMIN_MAIN_WINDOW,questionAndAnswerList);
        loadPreviewPanel();
    }//GEN-LAST:event_previewBtnActionPerformed

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged
        loadUnite();
        if (uniteCombo.getSelectedItem()!=null&&subjectCombo.getSelectedItem()!=null) {
            setNo();
        }
        
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void uniteComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_uniteComboItemStateChanged
        if (uniteCombo.getSelectedItem()!=null&&subjectCombo.getSelectedItem()!=null) {
            setNo();
        }
    }//GEN-LAST:event_uniteComboItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel examIdTxt;
    private javax.swing.JTextField examNameTxt;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel mainWindowPanel;
    private javax.swing.JComboBox<String> numberOfQuestionsCombo;
    private javax.swing.JButton previewBtn;
    private javax.swing.JComboBox<String> subjectCombo;
    private javax.swing.JComboBox<String> uniteCombo;
    // End of variables declaration//GEN-END:variables

    /*Method for set new exam Id*/
    private void setId(){
        try {
            IDController iDController=ServerConnector.getServerConnector().getIDController();
            String newId=iDController.getLastId("Exam");
            examIdTxt.setText(newId);
        } catch (NotBoundException ex) {
            Logger.getLogger(AutomaticallyExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AutomaticallyExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(AutomaticallyExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AutomaticallyExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*Method for load paper prevew panel*/
    private void loadPreviewPanel(){
        Admin_Main_Window.mainWindowPanel.removeAll();
        Admin_Main_Window.mainWindowPanel.add(examPaperPriviewPanel);
        Admin_Main_Window.mainWindowPanel.repaint();
        Admin_Main_Window.mainWindowPanel.revalidate();
        examPaperPriviewPanel.setVisible(true);
    }
    
    /*Method for load subjects to combo*/
    private void loadSubject(){
        try {
            SubjectController subjectController=ServerConnector.getServerConnector().getSubjectController();
            ArrayList<Subject> subjectList=subjectController.getAllSubject();
            if (subjectList!=null) {
                subjectCombo.removeAllItems();
                for (Subject subject : subjectList) {
                    subjectCombo.addItem(subject.getName());
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*Method for load unites to combo*/
    private void loadUnite(){
        try {
            UniteController uniteController=ServerConnector.getServerConnector().getUniteController();
            SubjectController subjectController=ServerConnector.getServerConnector().getSubjectController();
            Subject subject=subjectController.searchSubject("subjectName", subjectCombo.getSelectedItem().toString());
            String subject_id=subject.getSubject_id();
            ArrayList<Unite> uniteList=uniteController.getAllUnite(subject_id);
            if (uniteList!=null) {
                uniteCombo.removeAllItems();
                uniteCombo.addItem("All");
                for (Unite unite : uniteList) {
                    uniteCombo.addItem(unite.getName());
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private ArrayList<QuestionAndAnswer> addQuestions(String subject, String unite, int noOfQuestions){
        ArrayList<QuestionAndAnswer> questionAndAnswerList = new ArrayList<>();
        questionAndAnswerList=ChooseRandomQuestion.randomQuestions(subject, unite, noOfQuestions);
        return questionAndAnswerList;
    }
    
    /*Method for set numbers © Dinuka Kasun Medis*/
    private void setNo(){
        String subject=subjectCombo.getSelectedItem().toString();
        String unite=uniteCombo.getSelectedItem().toString();
        int no=ChooseRandomQuestion.noOfAll(subject, unite);
        numberOfQuestionsCombo.removeAllItems();
        for (int i = 0; i < no; i++) {
            numberOfQuestionsCombo.addItem(Integer.toString(i+1));
        }
        new ComboSearch().setSearchableCombo(numberOfQuestionsCombo, true, "No Question..");
    }
}
