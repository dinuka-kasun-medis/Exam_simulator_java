/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.genius.view.admin;

import edu.ijse.gdse37.genius.connector.ServerConnector;
import edu.ijse.gdse37.genius.observerImpl.AdminObserverImpl;
import edu.ijse.gdse37.genius_common.controllers.AdminController;
import edu.ijse.gdse37.genius_common.controllers.ExamAnswerSheetController;
import edu.ijse.gdse37.genius_common.controllers.ExamController;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import edu.ijse.gdse37.genius_common.model.Exam;
import edu.ijse.gdse37.genius_common.model.ExamAnswerSheet;
import edu.ijse.gdse37.genius_common.model.QuestionAndAnswer;
import java.io.InputStream;
import java.util.HashMap;
import javax.swing.JPanel;
//import net.sf.jasperreports.engine.JRException;
//import net.sf.jasperreports.engine.JasperCompileManager;
//import net.sf.jasperreports.engine.JasperFillManager;
//import net.sf.jasperreports.engine.JasperPrint;
//import net.sf.jasperreports.engine.JasperReport;
//import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Dinuka
 */
public class ExamPaperPriviewPanel extends javax.swing.JPanel {

    private ArrayList<QuestionAndAnswer> questionAndAnswerList;
    private ArrayList<ExamAnswerSheet> examAnswerSheetList = new ArrayList<>();
    private final String EXAM_ID;
    private final String EXAM_NAME;
    private final String SUBJECT;
    private final String UNITE;
    private final int NUMBER_OF_QUESTIONS;
    private boolean correct1;
    private boolean correct2;
    private boolean correct3;
    private boolean correct4;
    private boolean correct5;
    private ArrayList<QuestionAndAnswer> questionAndAnswerList2;
    private ExamAnswerSheet examAnswerSheet;
    private ResultsSavePanel resultsSavePanel;
    private AdminObserverImpl adminObserverImpl;
    private final Admin_Main_Window admin_Main_Window;

    /**
     * Creates new form ExamPaperPriviewPanel
     *
     * @param exam_id
     * @param examName
     * @param subject
     * @param unite
     * @param numberOfQuestions
     * @param admin_Main_Window
     */
    public ExamPaperPriviewPanel(String exam_id, String examName, String subject, String unite, int numberOfQuestions, Admin_Main_Window admin_Main_Window) {
        initComponents();
        this.admin_Main_Window = admin_Main_Window;
        this.EXAM_ID = exam_id;
        this.EXAM_NAME = examName;
        this.SUBJECT = subject;
        this.UNITE = unite;
        this.NUMBER_OF_QUESTIONS = numberOfQuestions;
        previewPaper();
    }

    ExamPaperPriviewPanel(String exam_id, String examName, String subject, String unite, int numberOfQuestions, ArrayList<String> questionList, ArrayList<String> answerList, Admin_Main_Window admin_Main_Window) {
        initComponents();
        this.admin_Main_Window = admin_Main_Window;
        resultsSavePanel = new ResultsSavePanel();
        this.EXAM_ID = exam_id;
        this.EXAM_NAME = examName;
        this.SUBJECT = subject;
        this.UNITE = unite;
        this.NUMBER_OF_QUESTIONS = numberOfQuestions;
        addQuestionsManual(questionList, answerList);
    }

    ExamPaperPriviewPanel(String exam_id, String examName, String subject, String unite, int numberOfQuestions, Admin_Main_Window admin_Main_Window, ArrayList<QuestionAndAnswer> questionAndAnswerList) {
        initComponents();
        this.admin_Main_Window = admin_Main_Window;
        this.EXAM_ID = exam_id;
        this.EXAM_NAME = examName;
        this.SUBJECT = subject;
        this.UNITE = unite;
        this.NUMBER_OF_QUESTIONS = numberOfQuestions;
        this.questionAndAnswerList = new ArrayList<>();
        this.questionAndAnswerList = questionAndAnswerList;
        addQuestions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainWindowPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paperTxtArea = new javax.swing.JTextArea();
        saveBtn = new javax.swing.JButton();
        publishBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        answerPanel = new javax.swing.JPanel();
        printBtn = new javax.swing.JButton();

        mainWindowPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.setLayout(null);

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/genius/view/images/logo2New.png"))); // NOI18N
        mainWindowPanel.add(jLabel8);
        jLabel8.setBounds(950, 550, 190, 90);

        paperTxtArea.setColumns(20);
        paperTxtArea.setRows(5);
        jScrollPane1.setViewportView(paperTxtArea);

        mainWindowPanel.add(jScrollPane1);
        jScrollPane1.setBounds(60, 46, 730, 510);

        saveBtn.setBackground(new java.awt.Color(162, 234, 249));
        saveBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(saveBtn);
        saveBtn.setBounds(320, 570, 210, 40);

        publishBtn.setBackground(new java.awt.Color(162, 234, 249));
        publishBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        publishBtn.setText("Publish");
        publishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(publishBtn);
        publishBtn.setBounds(60, 570, 230, 40);

        answerPanel.setLayout(new javax.swing.BoxLayout(answerPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(answerPanel);

        mainWindowPanel.add(jScrollPane2);
        jScrollPane2.setBounds(840, 50, 230, 500);

        printBtn.setBackground(new java.awt.Color(162, 234, 249));
        printBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        printBtn.setText("Print");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });
        mainWindowPanel.add(printBtn);
        printBtn.setBounds(560, 570, 210, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainWindowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        try {
            ExamController examController = ServerConnector.getServerConnector().getExamController();
            String content = paperTxtArea.getText().replace("\n", "♥").replace("\t", "♣");
            Exam exam = new Exam(EXAM_ID, EXAM_NAME, SUBJECT, UNITE, NUMBER_OF_QUESTIONS, content);
            boolean isAdded = examController.isAddExam(exam, examAnswerSheetList);
            if (isAdded) {
                JOptionPane.showMessageDialog(this, "Exam Save sucsess...");
            } else {
                JOptionPane.showMessageDialog(this, "Somthing wrong...");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveBtnActionPerformed

    private void publishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishBtnActionPerformed
        try {
            AdminController adminController = ServerConnector.getServerConnector().getAdminController();
            adminController.publishExam(EXAM_ID);
            addAdminObserver();
            Admin_Main_Window.exam_id=EXAM_ID;
            Admin_Main_Window.subject=SUBJECT;
            Admin_Main_Window.unite=UNITE;
            Admin_Main_Window.noOfQuestions=NUMBER_OF_QUESTIONS;
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(this, "No students connected..");//Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_publishBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        String exam_id = EXAM_ID;
        String exam_name = EXAM_NAME;
        String paper =paperTxtArea.getText();
        HashMap<String, Object> data = new HashMap<>();
        data.put("exam_id", exam_id);
        data.put("exam_name", exam_name);
        data.put("paper", paper);
//        try {
//            InputStream inputStream = getClass().getResourceAsStream("jreports\\Paper_Print.jrxml");
//            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
//            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, data);
//            JasperViewer.viewReport(jasperPrint,false);
//        } catch (JRException ex) {
//            //Logger.getLogger(NewInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_printBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel answerPanel;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainWindowPanel;
    private javax.swing.JTextArea paperTxtArea;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton publishBtn;
    private javax.swing.JButton saveBtn;
    // End of variables declaration//GEN-END:variables

    /*Method for add Questions © Dinuka Kasun Medis*/
    private void addQuestions() {
        int i = 1;
        if (questionAndAnswerList != null) {
            for (QuestionAndAnswer questionAndAnswer : questionAndAnswerList) {
                String questions = questionAndAnswer.getQuestion().replace("♥", "\n");
                String answer1 = questionAndAnswer.getAnswer1();
                String answer2 = questionAndAnswer.getAnswer2();
                String answer3 = questionAndAnswer.getAnswer3();
                String answer4 = questionAndAnswer.getAnswer4();
                String answer5 = questionAndAnswer.getAnswer5();
                correct1 = questionAndAnswer.isCorrect1();
                correct2 = questionAndAnswer.isCorrect2();
                correct3 = questionAndAnswer.isCorrect3();
                correct4 = questionAndAnswer.isCorrect4();
                correct5 = questionAndAnswer.isCorrect5();
                answerPanel.add(addAnswerLines(i, correct1, correct2, correct3, correct4, correct5));
                examAnswerSheet = new ExamAnswerSheet(EXAM_ID, correct1, correct2, correct3, correct4, correct5);
                examAnswerSheetList.add(examAnswerSheet);
                paperTxtArea.append("Q" + i + "." + questions + "\n\tA. " + answer1 + "\n\tB. " + answer2 + "\n\tC. " + answer3 + "\n\tD. " + answer4 + "\n\tE. " + answer5 + "\n\n");
                i++;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Somthing wrong...");
        }
    }

    
    /*
     * Method for add answer lines © Dinuka Kasun Medis
     * @param qNo
     * @param isCorrect1
     * @param isCorrect2
     * @param isCorrect3
     * @param isCorrect4
     * @param isCorrect5
     * @return
     */

    /**
     *
     * @param qNo
     * @param isCorrect1
     * @param isCorrect2
     * @param isCorrect3
     * @param isCorrect4
     * @param isCorrect5
     * @return
     */


    public static JPanel addAnswerLines(int qNo, boolean isCorrect1, boolean isCorrect2, boolean isCorrect3, boolean isCorrect4, boolean isCorrect5) {
        QuestionPanel2 questionPanel2 = new QuestionPanel2();
        questionPanel2.qNoLbl.setText(Integer.toString(qNo));
        questionPanel2.chekBox1.setSelected(isCorrect1);
        questionPanel2.chekBox2.setSelected(isCorrect2);
        questionPanel2.chekBox3.setSelected(isCorrect3);
        questionPanel2.chekBox4.setSelected(isCorrect4);
        questionPanel2.chekBox5.setSelected(isCorrect5);
        return questionPanel2;
    }

    /*Method for add Questions manually © Dinuka Kasun Medis*/
    private void addQuestionsManual(ArrayList<String> questionList, ArrayList<String> answerList) {
        ArrayList<String> questionList1 = questionList;
        ArrayList<String> answerList1 = answerList;
        int i = 0;
        for (String string : questionList1) {
            paperTxtArea.append("Q" + (i + 1) + "." + string);
            i++;
        }
        for (String string : answerList1) {
            String[] split = string.split(":");
            correct1 = Boolean.parseBoolean(split[0]);
            correct2 = Boolean.parseBoolean(split[1]);
            correct3 = Boolean.parseBoolean(split[2]);
            correct4 = Boolean.parseBoolean(split[3]);
            correct5 = Boolean.parseBoolean(split[4]);
            answerPanel.add(addAnswerLines(i, correct1, correct2, correct3, correct4, correct5));
            examAnswerSheet = new ExamAnswerSheet(EXAM_ID, correct1, correct2, correct3, correct4, correct5);
            examAnswerSheetList.add(examAnswerSheet);
            i++;
        }
    }

    /*Method for preview Exam © Dinuka Kasun Medis*/
    private void previewPaper() {
        try {
            ExamController examController = ServerConnector.getServerConnector().getExamController();
            ExamAnswerSheetController examAnswerSheetController = ServerConnector.getServerConnector().getExamAnswerSheetController();
            Exam exam = examController.searchExam("exam_id", EXAM_ID);
            paperTxtArea.setText(exam.getContent().replace("♥", "\n").replace("♣", "\t"));
            ArrayList<ExamAnswerSheet> answerList1 = examAnswerSheetController.getAllExamAnswerSheet(EXAM_ID);
            for (int i = 0; i < answerList1.size(); i++) {
                correct1 = answerList1.get(i).isCorect1();
                correct2 = answerList1.get(i).isCorect2();
                correct3 = answerList1.get(i).isCorect3();
                correct4 = answerList1.get(i).isCorect4();
                correct5 = answerList1.get(i).isCorect5();
                answerPanel.add(addAnswerLines((i + 1), correct1, correct2, correct3, correct4, correct5));
            }

        } catch (NotBoundException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamPaperPriviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for add admin observer © Dinuka Kasun Medis*/

    /**
     *
     */

    public void addAdminObserver() {
        try {
            AdminController adminController = ServerConnector.getServerConnector().getAdminController();
            adminObserverImpl = new AdminObserverImpl(admin_Main_Window);
            adminController.isAddAdminObserver(adminObserverImpl);
        } catch (NotBoundException ex) {
            Logger.getLogger(ViewAdminList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ViewAdminList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewAdminList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewAdminList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
