/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.genius.view.admin;

import edu.ijse.gdse37.genius.connector.ServerConnector;
import edu.ijse.gdse37.genius_common.controllers.IDController;
import edu.ijse.gdse37.genius_common.controllers.QuestionAndAnswerController;
import edu.ijse.gdse37.genius_common.controllers.SubjectController;
import edu.ijse.gdse37.genius_common.controllers.UniteController;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import edu.ijse.gdse37.genius_common.model.QuestionAndAnswer;
import edu.ijse.gdse37.genius_common.model.Subject;
import edu.ijse.gdse37.genius_common.model.Unite;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Dinuka
 */
public class ManualExamCreate extends javax.swing.JPanel {

    ArrayList<String> questionList = new ArrayList<>();
    ArrayList<String> answerList = new ArrayList<>();
    ArrayList<String> selectedQuestions = new ArrayList<>();
    private static ExamPaperPriviewPanel examPaperPriviewPanel;
    private final Admin_Main_Window admin_Main_Window;
    // private final ExamPaperPriviewPanel examPaperPriviewPanel=new ExamPaperPriviewPanel();

    /**
     * Creates new form ManualExamCreate
     * @param admin_Main_Window
     */
    public ManualExamCreate(Admin_Main_Window admin_Main_Window) {
        initComponents();
        this.admin_Main_Window=admin_Main_Window;
        setId();
        detailTable.setRowHeight(30);
        detailTable.getTableHeader().setFont(new Font("Times New Roman", Font.PLAIN, 18));
        detailTable.getTableHeader().setBackground(Color.BLUE);
        loadSubject();
        loadUnite();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainWindowPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        noOfQuestoinsLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        viewBtn1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        examNameTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        viewBtn2 = new javax.swing.JButton();
        uniteCombo = new javax.swing.JComboBox<>();
        subjectCombo = new javax.swing.JComboBox<>();
        examIdTxt = new javax.swing.JLabel();

        mainWindowPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainWindowPanel.setLayout(null);

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/genius/view/images/logo2New.png"))); // NOI18N
        mainWindowPanel.add(jLabel8);
        jLabel8.setBounds(950, 550, 190, 90);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Exam Name :");
        mainWindowPanel.add(jLabel3);
        jLabel3.setBounds(430, 10, 120, 30);

        noOfQuestoinsLbl.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        noOfQuestoinsLbl.setText("0");
        mainWindowPanel.add(noOfQuestoinsLbl);
        noOfQuestoinsLbl.setBounds(290, 520, 60, 30);

        detailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question Id", "Question", "Unite"
            }
        ));
        jScrollPane1.setViewportView(detailTable);
        if (detailTable.getColumnModel().getColumnCount() > 0) {
            detailTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            detailTable.getColumnModel().getColumn(1).setPreferredWidth(700);
            detailTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        mainWindowPanel.add(jScrollPane1);
        jScrollPane1.setBounds(50, 122, 1040, 360);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Select Subject :");
        mainWindowPanel.add(jLabel5);
        jLabel5.setBounds(10, 50, 120, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Number of Selected Questions :");
        mainWindowPanel.add(jLabel6);
        jLabel6.setBounds(50, 520, 250, 30);

        viewBtn1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        viewBtn1.setText("Add");
        viewBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtn1ActionPerformed(evt);
            }
        });
        mainWindowPanel.add(viewBtn1);
        viewBtn1.setBounds(900, 510, 190, 40);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Exam Id :");
        mainWindowPanel.add(jLabel7);
        jLabel7.setBounds(10, 10, 90, 30);

        examNameTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainWindowPanel.add(examNameTxt);
        examNameTxt.setBounds(550, 10, 250, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Select Unite :");
        mainWindowPanel.add(jLabel9);
        jLabel9.setBounds(430, 50, 120, 30);

        viewBtn2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        viewBtn2.setText("Preview");
        viewBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtn2ActionPerformed(evt);
            }
        });
        mainWindowPanel.add(viewBtn2);
        viewBtn2.setBounds(50, 560, 230, 40);

        uniteCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        uniteCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                uniteComboItemStateChanged(evt);
            }
        });
        mainWindowPanel.add(uniteCombo);
        uniteCombo.setBounds(580, 50, 220, 30);

        subjectCombo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        mainWindowPanel.add(subjectCombo);
        subjectCombo.setBounds(130, 50, 220, 30);

        examIdTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        examIdTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mainWindowPanel.add(examIdTxt);
        examIdTxt.setBounds(110, 10, 240, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainWindowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtn1ActionPerformed
        try {
            int selectedRow = detailTable.getSelectedRow();
            String question_id = detailTable.getValueAt(selectedRow, 0).toString();
            QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
            String subject = subjectCombo.getSelectedItem().toString();
            String unite = detailTable.getValueAt(selectedRow, 2).toString();
            QuestionAndAnswer questionAndAnswer = questionAndAnswerController.searchQuestionAndAnswer(subject, unite, "question_id", question_id);
            String questions = questionAndAnswer.getQuestion().replace("â™¥", "\n");
            String answer1 = questionAndAnswer.getAnswer1();
            String answer2 = questionAndAnswer.getAnswer2();
            String answer3 = questionAndAnswer.getAnswer3();
            String answer4 = questionAndAnswer.getAnswer4();
            String answer5 = questionAndAnswer.getAnswer5();
            String correct1 = Boolean.toString(questionAndAnswer.isCorrect1());
            String correct2 = Boolean.toString(questionAndAnswer.isCorrect2());
            String correct3 = Boolean.toString(questionAndAnswer.isCorrect3());
            String correct4 = Boolean.toString(questionAndAnswer.isCorrect4());
            String correct5 = Boolean.toString(questionAndAnswer.isCorrect5());
            String formatedQuestion = questions + "\n\tA. " + answer1 + "\n\tB. " + answer2 + "\n\tC. " + answer3 + "\n\tD. " + answer4 + "\n\tE. " + answer5 + "\n\n";
            questionList.add(formatedQuestion);
            selectedQuestions.add(question_id);
            answerList.add(correct1 + ":" + correct2 + ":" + correct3 + ":" + correct4 + ":" + correct5);
            noOfQuestoinsLbl.setText(Integer.toString(answerList.size()));
            changeSelectedQuestionRow();
        } catch (NotBoundException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewBtn1ActionPerformed

    private void viewBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtn2ActionPerformed
        String exam_id = examIdTxt.getText();
        String examName = examNameTxt.getText();
        String subject = subjectCombo.getSelectedItem().toString();
        String unite = uniteCombo.getSelectedItem().toString();
        int numberOfQuestions = Integer.parseInt(noOfQuestoinsLbl.getText());
        examPaperPriviewPanel = new ExamPaperPriviewPanel(exam_id, examName, subject, unite, numberOfQuestions, questionList, answerList,admin_Main_Window);
        Admin_Main_Window.mainWindowPanel.removeAll();
        Admin_Main_Window.mainWindowPanel.add(examPaperPriviewPanel);
        Admin_Main_Window.mainWindowPanel.repaint();
        Admin_Main_Window.mainWindowPanel.revalidate();
        examPaperPriviewPanel.setVisible(true);
    }//GEN-LAST:event_viewBtn2ActionPerformed

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged
        loadQuestions();
        loadUnite();
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void uniteComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_uniteComboItemStateChanged
        loadQuestions();
    }//GEN-LAST:event_uniteComboItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable detailTable;
    private javax.swing.JLabel examIdTxt;
    private javax.swing.JTextField examNameTxt;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainWindowPanel;
    private javax.swing.JLabel noOfQuestoinsLbl;
    private javax.swing.JComboBox<String> subjectCombo;
    private javax.swing.JComboBox<String> uniteCombo;
    private javax.swing.JButton viewBtn1;
    private javax.swing.JButton viewBtn2;
    // End of variables declaration//GEN-END:variables

    /*Method for set new Exam Id Â© Dinuka Kasun Medis*/
    private void setId() {
        try {
            IDController iDController = ServerConnector.getServerConnector().getIDController();
            String newId = iDController.getLastId("Exam");
            examIdTxt.setText(newId);
        } catch (NotBoundException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for load subjects Â© Dinuka Kasun Medis*/
    private void loadSubject() {
        try {
            SubjectController subjectController = ServerConnector.getServerConnector().getSubjectController();
            ArrayList<Subject> subjectList = subjectController.getAllSubject();
            if (subjectList != null) {
                subjectCombo.removeAllItems();
                for (Subject subject : subjectList) {
                    subjectCombo.addItem(subject.getName());
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for load unites Â© Dinuka Kasun Medis*/
    private void loadUnite() {
        try {
            UniteController uniteController = ServerConnector.getServerConnector().getUniteController();
            SubjectController subjectController=ServerConnector.getServerConnector().getSubjectController();
            Subject subject=subjectController.searchSubject("subjectName", subjectCombo.getSelectedItem().toString());
            String subject_id=subject.getSubject_id();
            ArrayList<Unite> uniteList = uniteController.getAllUnite(subject_id);
            if (uniteList != null) {
                uniteCombo.removeAllItems();
                uniteCombo.addItem("All");
                for (Unite unite : uniteList) {
                    uniteCombo.addItem(unite.getName());
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for load Questions to table Â© Dinuka Kasun Medis*/
    private void loadQuestions() {
        try {
            if (subjectCombo.getSelectedItem() != null && uniteCombo.getSelectedItem() != null) {
                DefaultTableModel dtm = (DefaultTableModel) detailTable.getModel();
                QuestionAndAnswerController questionAndAnswerController = ServerConnector.getServerConnector().getquAndAnswerController();
                ArrayList<QuestionAndAnswer> questionList = questionAndAnswerController.getAllQuestionAndAnswers(subjectCombo.getSelectedItem().toString(), uniteCombo.getSelectedItem().toString());
                dtm.setRowCount(0);
                for (QuestionAndAnswer questionAndAnswer : questionList) {
                    Object[] raw = {questionAndAnswer.getQuestion_id(), questionAndAnswer.getQuestion().replace("â™¥", "\n"), questionAndAnswer.getUnit()};
                    dtm.addRow(raw);
                }
            } else {
                //Do nothing..
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManualExamCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Method for change row colour Â© Dinuka Kasun Medis*/
    private void changeSelectedQuestionRow() {
        detailTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
                String status = (String) table.getModel().getValueAt(row, 0);
                for (String selectedQuestion : selectedQuestions) {
                    if (selectedQuestion.equals(status)) {
                        setBackground(Color.GREEN);
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(table.getBackground());
                        setForeground(table.getForeground());
                    }
                }
                return this;
            }
        });
    }

}
